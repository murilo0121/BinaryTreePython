# MURILO ERHARDT
# BINARY TREE PYTHON
# ÁRVORE BINÁRIA PYTHON

class BinaryTree():
    
    #construtor 
    def __init__(self, bInfo, bLeft, bRight):      
        self.left = bLeft
        self.right = bRight
        self.info = bInfo
        
    #metodo para inserir a esquerda de um nó   
    def insertLeft(self, bNode):
        if(self.left == None):        
            self.left = bNode
        else:
            print ('Erro!!!, Já existe um nó a esquerda')
    
    #metodo para inserir a esquerda de um nó 
    def insertRight(self, bNode):
        if(self.right == None):        
            self.right = bNode
        else:
            print ('Erro!!!, Já existe um nó a direita')     

    def removeRight(self):
        self.right = None

    def removeLeft(self):
        self.leftt = None
        
    def updateInfo(self, info):
        self.info = info
    
    def pre_order(self):
        print(self.info)
        if(self.left != None):
            (self.left).pre_order()
        if(self.right != None):
            (self.right).pre_order()
            
    def pos_order(self):
        if(self.left != None):
            (self.left).pos_order()       
        print(self.info)
        if(self.right != None):
            (self.right).pos_order()
            
    def final_order(self):
        if(self.left != None):
            (self.left).final_order()
        if(self.right != None):
            (self.right).final_order()
        print(self.info)
        
    
    def printInfo(self):
        print ("Endereco do objeto: ", self)
        print ('Informacao: %d' % (self.info))
        print ("Endereco esquerdo: ", self.left)
        print ("Endereco direito: ", self.right)


# Tree created based: http://imgur.com/wKB6UTt
# Árvore criada com base em: http://imgur.com/wKB6UTt

# A árvore inicia em BT9, começe.
# The tree starts at object BT9

# Para chama um método use ex: BT9.pre_order()
# To call a method use: BT9.pre_order()

BT1 = BinaryTree(7, None, None)
BT2 = BinaryTree(11, None, None)
BT3 = BinaryTree(10, None, None)
BT4 = BinaryTree(4, None, None)
BT5 = BinaryTree(5, BT1, None)
BT6 = BinaryTree(9, BT2, BT3)
BT7 = BinaryTree(8, BT6, None)
BT8 = BinaryTree(2, BT4, BT5)
BT9 = BinaryTree(7, BT8, BT7)

_____________________________________________________

#inicio da implementação do grafo


class Vertice():
    def __init__(self, Nnome):
        self.nome = Nnome
    def imprimeVertice(self):   
        print(self.nome)
    
        
class Aresta():
    def __init__(self, V1, V2):
        self.vertice1 = V1
        self.vertice2 = V2
    
    def imprimeVerticesDeAresta(self):
         self.vertice1.imprimeVertice()
         self.vertice2.imprimeVertice()


class Llist():
    
    #construtor 
    def __init__(self, linfo, lnext):      
        self.info = linfo
        self.next = lnext
        
    #
    def insertlist(self, LlIST):
        if(self.next == None):        
            self.next = LlIST
        else:   
             print ('impossivel inserir')
        
    def deletelist(self):
        self.next = None
    
    def printList(self):
        print(self.info)
        if(self.next != None):
            (self.next).printList()
            

class Grafo():
    def __init__(self,vertices, arestas):
        self.vertices = vertices
        self.arestas = arestas
  
      
V1= Vertice(3)
V2= Vertice(4)
A1= Aresta(V1,V2)
